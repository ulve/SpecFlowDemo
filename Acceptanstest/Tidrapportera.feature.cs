// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Acceptanstest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Tidrapportera")]
    public partial class TidrapporteraFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Tidrapportera.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("sv-SE"), "Tidrapportera", "För att kunna fakturera kunder\r\nVill jag som anställd på Agio\r\nKunna bokföra mina" +
                    " jobbade timmar", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("att jag befinner mig på inmatningssidan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Givet ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Bokföra timme")]
        public virtual void BokforaTimme()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bokföra timme", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 10
 testRunner.Given("jag har fyllt i tiden 3 timmar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Givet ");
#line 11
 testRunner.And("jag har fyllt i kunden Gullans 50-talsmöbler", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Och ");
#line 12
 testRunner.When("jag trycker på lägg till", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "När ");
#line 13
 testRunner.Then("skall en ny post för Gullans 50-talsmöbler läggas till", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Så ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alla obligatoriska fält måste vara ifyllda")]
        [NUnit.Framework.TestCaseAttribute("", "Nisses kött och TV", "Jag vet inte hur länge jag jobbat", "Tid saknas", null)]
        [NUnit.Framework.TestCaseAttribute("3", "", "Vem jobbade jag nu åt", "Kund saknas", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "ÖÖh vad har jag nu gjort", "Tid saknas", null)]
        [NUnit.Framework.TestCaseAttribute("", "", "ÖÖh vad har jag nu gjort", "Kund saknas", null)]
        public virtual void AllaObligatoriskaFaltMasteVaraIfyllda(string tid, string kund, string kommentar, string meddelande, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alla obligatoriska fält måste vara ifyllda", exampleTags);
#line 15
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 16
 testRunner.Given(string.Format("jag har fyllt följande värden {0}, {1} och {2}", tid, kund, kommentar), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Givet ");
#line 17
 testRunner.When("jag trycker på lägg till", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "När ");
#line 18
 testRunner.Then(string.Format("skall jag få {0}", meddelande), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Så ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
